import os
import shutil
import datetime
import sys
from collections import defaultdict
from pathlib import Path

# Mapping of file extensions to descriptive folder names
FILE_TYPE_MAP = {
    'pdf': 'PDFs',
    'jpg': 'Images', 'jpeg': 'Images', 'png': 'Images', 'gif': 'Images', 'bmp': 'Images',
    'doc': 'Documents', 'docx': 'Documents', 'odt': 'Documents',
    'xls': 'Spreadsheets', 'xlsx': 'Spreadsheets', 'csv': 'Spreadsheets',
    'ppt': 'Presentations', 'pptx': 'Presentations',
    'txt': 'Text Files', 'md': 'Text Files',
    'zip': 'Archives', 'rar': 'Archives', '7z': 'Archives', 'tar': 'Archives', 'gz': 'Archives',
    'mp3': 'Audio', 'wav': 'Audio', 'aac': 'Audio',
    'mp4': 'Videos', 'mov': 'Videos', 'avi': 'Videos', 'mkv': 'Videos',
    'exe': 'Executables', 'msi': 'Executables',
    'stl': '3D Prints', 'gcode': '3D Prints', 'obj': '3D Prints', '3mf': '3D Prints',
    'bgcode': '3D Prints', 'bmcfg': '3D Prints', 'bmpreset': '3D Prints',
    'iso': 'Disk Images', 'img': 'Disk Images'
}

def get_file_type(ext):
    return FILE_TYPE_MAP.get(ext.lower(), 'Other Files')

def safe_move_file(file_path, dest_folder):
    dest_file = dest_folder / file_path.name
    count = 1
    while dest_file.exists():
        dest_file = dest_folder / f"{file_path.stem} ({count}){file_path.suffix}"
        count += 1
    shutil.move(str(file_path), str(dest_file))
    return dest_file

# --- Begin main function ---
def main():
    # Set source folder to Downloads
    source = Path.home() / "Downloads"
    if not source.exists() or not source.is_dir():
        print(f"Download folder not found: {source}")
        sys.exit(1)

    # Set destination folder to Downloads/Organized
    dest = source / "Organized"
    try:
        dest.mkdir(parents=True, exist_ok=True)
    except Exception as e:
        print(f"Failed to create destination folder: {e}")
        sys.exit(1)

    # Only gather top-level files (no folders or nested files)
    files = [f for f in source.iterdir() if f.is_file()]
    files = [f for f in files if dest not in f.parents]
    file_count = len(files)

    # Exit early if nothing to organize
    if file_count == 0:
        print("No files found to organize.")
        return

    estimated_time = round(file_count * 0.01, 2)

    # Show summary and ask user to proceed
    print(f"\nFound {file_count} files in Downloads to organize.")
    print(f"Estimated time to complete: {estimated_time} seconds.")
    confirm = input("Proceed with file organization? (y/n): ").lower()
    if confirm != 'y':
        print("Operation cancelled.")
        return

    moved_files = []

    # Move each file into categorized folder
    # Special case: If the file is an archive and a folder with the same name exists, delete the folder before moving the archive
    archive_exts = {'.zip', '.rar', '.7z', '.tar', '.gz'}
    for file_path in files:
        ext = file_path.suffix[1:]  # remove dot from extension
        category = get_file_type(ext)

        # Check for matching folder if archive
        if file_path.suffix.lower() in archive_exts:
            possible_folder = file_path.with_suffix('')
            if possible_folder.exists() and possible_folder.is_dir():
                try:
                    shutil.rmtree(possible_folder)
                    print(f"Deleted extracted folder: {possible_folder}")
                except Exception as e:
                    print(f"Failed to delete folder {possible_folder}: {e}")

        dest_folder = dest / category
        dest_folder.mkdir(exist_ok=True)
        try:
            new_path = safe_move_file(file_path, dest_folder)
            moved_files.append((file_path, new_path))
        except Exception as e:
            print(f"Failed to move {file_path}: {e}")

    # NOTE: We are no longer removing empty directories, since folders are ignored.
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    log_file = dest / f"logfile_{timestamp}.txt"
    try:
        with open(log_file, 'w', encoding='utf-8') as log:
            for src, dst in moved_files:
                log.write(f"Moved: {src} -> {dst}\n")
        print(f"\nDone. Moved {len(moved_files)} files. Log saved to {log_file}.")
    except Exception as e:
        print(f"Failed to write log file: {e}")

if __name__ == '__main__':
    main()

# =============================================================
# End of Script
# Generated by ChatGPT (OpenAI GPT-4) on user request
# 
# User: Mobintellect
# Original Prompt: "I need to write a python program or script that will help me organize my folders in windows by file type. Basically what I want to do, is have the program ask me what folder I want to organize. Then, it takes that folder and moves every file even in the subfolders into a new folder named after the filetype inside."
# Later refined to: Always target the Windows Downloads folder as the source.
# 
# Script Summary:
# This script organizes files located in the top level of the user's Downloads folder.
# It categorizes each file by its type (e.g., PDFs, Images, Videos, 3D Prints, etc.)
# and moves them into subfolders under Downloads\\Organized.
# 
# Key Features:
# - Only files in the *top-level* of Downloads are moved (folders are ignored).
# - Folders are never deleted, and empty folders are not removed.
# - Archive files (.zip, .rar, etc.) are checked for matching extracted folders;
#   if such a folder exists, it is deleted before the archive is relocated.
# - The destination folder is always Downloads\\Organized (static, no prompt).
# - Before moving, the user is shown a summary and asked to confirm.
# - All file moves are logged in a timestamped logfile stored in the destination.
# 
# Designed for recurring use and easy manual review of any folders left behind.
# =============================================================
